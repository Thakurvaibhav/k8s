global:
  scrape_interval: 5s
  scrape_timeout: 5s
  evaluation_interval: 5s
  external_labels:
    cluster: $(CLUSTER_NAME)
    environment: $(ENVIRONMENT)
    # Each Prometheus has to have unique labels.
    prometheus_replica: $(POD_NAME)

rule_files:
  - /etc/prometheus/rules/*rules.yaml

alerting:

  # We want our alerts to be deduplicated
  # from different replicas.
  alert_relabel_configs:
  - regex: prometheus_replica
    action: labeldrop

  alertmanagers:
    - scheme: http
      path_prefix: /
      static_configs:
        - targets: ['alertmanager:9093']

scrape_configs:
- job_name: kubernetes-nodes-cadvisor
  scrape_interval: 10s
  scrape_timeout: 10s
  scheme: https
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  kubernetes_sd_configs:
    - role: node
  relabel_configs:
    - action: labelmap
      regex: __meta_kubernetes_node_label_(.+)
    # Only for Kubernetes ^1.7.3.
    # See: https://github.com/prometheus/prometheus/issues/2916
    - target_label: __address__
      replacement: kubernetes.default.svc:443
    - source_labels: [__meta_kubernetes_node_name]
      regex: (.+)
      target_label: __metrics_path__
      replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
  metric_relabel_configs:
    - action: replace
      source_labels: [id]
      regex: '^/machine\.slice/machine-rkt\\x2d([^\\]+)\\.+/([^/]+)\.service$'
      target_label: rkt_container_name
      replacement: '${2}-${1}'
    - action: replace
      source_labels: [id]
      regex: '^/system\.slice/(.+)\.service$'
      target_label: systemd_service_name
      replacement: '${1}'

- job_name: kubernetes-nodes-kubelet
  scrape_interval: 10s
  scrape_timeout: 10s
  scheme: https
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  kubernetes_sd_configs:
    - role: node
  relabel_configs:
    - action: labelmap
      regex: __meta_kubernetes_node_label_(.+)
    # Only for Kubernetes ^1.7.3.
    # See: https://github.com/prometheus/prometheus/issues/2916
    - target_label: __address__
      replacement: kubernetes.default.svc:443
    - source_labels: [__meta_kubernetes_node_name]
      regex: (.+)
      target_label: __metrics_path__
      replacement: /api/v1/nodes/${1}/proxy/metrics
  metric_relabel_configs:
    - action: replace
      source_labels: [id]
      regex: '^/machine\.slice/machine-rkt\\x2d([^\\]+)\\.+/([^/]+)\.service$'
      target_label: rkt_container_name
      replacement: '${2}-${1}'
    - action: replace
      source_labels: [id]
      regex: '^/system\.slice/(.+)\.service$'
      target_label: systemd_service_name
      replacement: '${1}'

- job_name: 'kubernetes-pods'
  scrape_interval: 10s
  scrape_timeout: 10s
  kubernetes_sd_configs:
    - role: pod
  relabel_configs:
    - action: labelmap
      regex: __meta_kubernetes_pod_label_(.+)
    - source_labels: [__meta_kubernetes_namespace]
      action: replace
      target_label: kubernetes_namespace
    - source_labels: [__meta_kubernetes_pod_name]
      action: replace
      target_label: kubernetes_pod_name
    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
      action: keep
      regex: true
    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
      action: replace
      target_label: __scheme__
      regex: (https?)
    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
      action: replace
      target_label: __metrics_path__
      regex: (.+)
    - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
      action: replace
      target_label: __address__
      regex: ([^:]+)(?::\d+)?;(\d+)
      replacement: $1:$2

- job_name: 'kubernetes-apiservers'
  kubernetes_sd_configs:
    - role: endpoints
  scheme: https 
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    insecure_skip_verify: true
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  relabel_configs:
    - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
      action: keep
      regex: default;kubernetes;https

- job_name: 'kubernetes-service-endpoints'
  scrape_interval: 30s
  scrape_timeout: 30s
  kubernetes_sd_configs:
    - role: endpoints
  relabel_configs:
    - action: labelmap
      regex: __meta_kubernetes_service_label_(.+)
    - source_labels: [__meta_kubernetes_namespace]
      action: replace
      target_label: kubernetes_namespace
    - source_labels: [__meta_kubernetes_service_name]
      action: replace
      target_label: kubernetes_name
    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
      action: keep
      regex: true
    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
      action: replace
      target_label: __scheme__
      regex: (https?)
    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
      action: replace
      target_label: __metrics_path__
      regex: (.+)
    - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
      action: replace
      target_label: __address__
      regex: (.+)(?::\d+);(\d+)
      replacement: $1:$2

- job_name: "blackbox-ingress"

  metrics_path: /probe
  params:
    module: [http_2xx]

  kubernetes_sd_configs:
    - role: ingress

  relabel_configs:
    # Overwrite the scheme using blackbox.io/scheme annotation
    - source_labels: [__meta_kubernetes_ingress_annotation_blackbox_io_scheme]
      regex: "(http|https)"
      target_label: __meta_kubernetes_ingress_scheme
      replacement: "$1"
    - source_labels:
        [
          __meta_kubernetes_ingress_scheme,
          __address__,
        ]
      regex: (.+);(.+)
      replacement: ${1}://${2}
      target_label: __param_target
    # Overwrite the path using blackbox.io/path annotation
    - source_labels:
        [
          __meta_kubernetes_ingress_scheme,
          __address__,
          __meta_kubernetes_ingress_annotation_blackbox_io_path,
        ]
      regex: (.+);(.+);(.+)
      replacement: ${1}://${2}${3}
      target_label: __param_target
    # Overwrite the module using blackbox.io/module annotation
    - action: labelmap
      regex: __meta_kubernetes_ingress_annotation_blackbox_io_module
      replacement: __param_module
    - target_label: __address__
      replacement: prometheus-blackbox-exporter:9115
    - source_labels: [__param_target]
      target_label: instance
    - source_labels: [__meta_kubernetes_namespace]
      target_label: namespace
    - source_labels: [__meta_kubernetes_ingress_name]
      target_label: ingress

- job_name: "blackbox-ingress-tcp"

  metrics_path: /probe
  params:
    module: [tcp_connect]

  kubernetes_sd_configs:
    - role: ingress

  relabel_configs:
    # Add "blackbox.io/tcp: blackbox "annotation to enable blackbox monitoring
    - source_labels: [__meta_kubernetes_ingress_annotation_blackbox_io_tcp]
      action: keep
      regex: true

    - source_labels:
        [
          __address__
        ]
      regex: (.+)
      replacement: '${1}:9000'
      target_label: __param_target

    # Overwrite the path using blackbox.io/tcpport annotation
    - source_labels:
        [
          __address__,
          __meta_kubernetes_ingress_annotation_blackbox_io_tcpport,
        ]
      regex: (.+);(.+)
      replacement: ${1}:${2}
      target_label: __param_target

    # Overwrite the target using blackbox.io/tcptarget annotation
    - action: labelmap
      regex: __meta_kubernetes_ingress_annotation_blackbox_io_tcptarget
      replacement: __param_target

    # Overwrite the module using blackbox.io/tcpmodule annotation
    - action: labelmap
      regex: __meta_kubernetes_ingress_annotation_blackbox_io_tcpmodule
      replacement: __param_module

    # Pass the servername parameter using blackbox.io/tcpservername annotation
    - action: labelmap
      regex: __meta_kubernetes_ingress_annotation_blackbox_io_tcpservername
      replacement: __param_hostname

    - target_label: __address__
      replacement: prometheus-blackbox-exporter:9115
    - source_labels: [__param_target]
      target_label: instance
    - source_labels: [__meta_kubernetes_namespace]
      target_label: namespace
    - source_labels: [__meta_kubernetes_ingress_name]
      target_label: ingress

- job_name: "blackbox-service-http"

  metrics_path: /probe
  params:
    module: [http_2xx]

  kubernetes_sd_configs:
    - role: service

  relabel_configs:
    # Overwrite the scheme using blackbox.io/scheme annotation
    - source_labels: [__meta_kubernetes_service_annotation_blackbox_io_scheme]
      regex: "(http|https)"
      target_label: __meta_kubernetes_service_scheme
      replacement: "$1"
    - source_labels:
        [
          __meta_kubernetes_service_scheme,
          __meta_kubernetes_service_annotation_blackbox_io_address,
        ]
      regex: (.+);(.+)
      replacement: ${1}://${2}
      target_label: __param_target
    # Overwrite the path using blackbox.io/path annotation
    - source_labels:
        [
          __meta_kubernetes_service_scheme,
          __meta_kubernetes_service_annotation_blackbox_io_address,
          __meta_kubernetes_service_annotation_blackbox_io_path,
        ]
      regex: (.+);(.+);(.+)
      replacement: ${1}://${2}${3}
      target_label: __param_target
    # Overwrite the module using blackbox.io/module annotation
    - action: labelmap
      regex: __meta_kubernetes_service_annotation_blackbox_io_module
      replacement: __param_module
    - target_label: __address__
      replacement: prometheus-blackbox-exporter:9115
    - source_labels: [__param_target]
      target_label: instance
    - source_labels: [__meta_kubernetes_namespace]
      target_label: namespace
    - source_labels: [__meta_kubernetes_service_name]
      target_label: service

- job_name: "blackbox-service-tcp"

  metrics_path: /probe
  params:
    module: [tcp_connect]

  kubernetes_sd_configs:
    - role: service

  relabel_configs:

    # Overwrite the module using blackbox.io/tcpmodule annotation
    - action: labelmap
      regex: __meta_kubernetes_service_annotation_blackbox_io_tcpmodule
      replacement: __param_module

    # Pass the servername parameter using blackbox.io/tcpservername annotation
    - action: labelmap
      regex: __meta_kubernetes_service_annotation_blackbox_io_tcpservername
      replacement: __param_hostname

    - source_labels: [__meta_kubernetes_service_annotation_blackbox_io_address]
      regex: (.+)
      replacement: '${1}'
      target_label: __param_target

    # Overwrite the path using blackbox.io/tcpport annotation
    - source_labels:
        [
          __meta_kubernetes_service_annotation_blackbox_io_address,
          __meta_kubernetes_service_annotation_blackbox_io_tcpport,
        ]
      regex: (.+);(.+)
      replacement: ${1}:${2}
      target_label: __param_target
    - target_label: __address__
      replacement: prometheus-blackbox-exporter:9115
    - source_labels: [__param_target]
      target_label: instance
    - source_labels: [__meta_kubernetes_namespace]
      target_label: namespace
    - source_labels: [__meta_kubernetes_service_name]
      target_label: service
