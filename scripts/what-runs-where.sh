#!/bin/bash
set -euo pipefail

# what-runs-where.sh (simplified)
# Generates charts/app-of-apps/what-runs-where.md mapping clusters -> enabled components -> effective targetRevision
# Requires: yq v4

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
APP_DIR="${SCRIPT_DIR}/../charts/app-of-apps"
OUT_FILE="${APP_DIR}/what-runs-where.md"
BASE_FILE="${APP_DIR}/values.yaml"  # base values file

command -v yq >/dev/null 2>&1 || { echo "[ERROR] yq not found" >&2; exit 1; }
[ -f "${BASE_FILE}" ] || { echo "[ERROR] ${BASE_FILE} not found" >&2; exit 1; }

# Collect env values files
VALUE_FILES=()
for f in "${APP_DIR}"/values.*.yaml; do [ -f "$f" ] && VALUE_FILES+=("$f"); done
[ ${#VALUE_FILES[@]} -eq 0 ] && { echo "[WARN] No values.*.yaml under ${APP_DIR}" >&2; exit 0; }
VALUE_FILES=( $(printf '%s\n' "${VALUE_FILES[@]}" | sort) )

# Discover components from base values.yaml
read -r -d '' COMPONENTS_STR < <(yq -r '. | to_entries[] | select(.value.enable != null) | .key' "${BASE_FILE}" | sort -u | tr '\n' ' ' && printf '\0') || true
IFS=' ' read -r -a COMPONENTS <<< "${COMPONENTS_STR}"; unset IFS

# Helper: env inference + ordering
lower() {
  printf '%s' "$1" | tr 'A-Z' 'a-z'
}

env_of() {
  case "$(lower "$1")" in
    ops*)          echo ops ;;
    prod*)         echo prod ;;
    stag*|stage*)  echo staging ;;
    dev*)          echo dev ;;
    *)             echo other ;;
  esac
}

rank_of() {
  case "$(lower "$1")" in
    ops*)     echo 0 ;;
    prod*)    echo 1 ;;
    staging)  echo 2 ;;
    dev*)     echo 3 ;;
    *)        echo 9 ;;
  esac
}

# Build header
HEADER="| Cluster | Env | Default targetRevision |"
SEPARATOR="|---------|-----|----------------------|"
for c in "${COMPONENTS[@]}"; do HEADER+=" ${c} |"; SEPARATOR+="------------|"; done

# Rows
ROWS=()
for vf in "${VALUE_FILES[@]}"; do
  cluster=$(yq -r '.cluster.name' "$vf")
  default_rev=$(yq -r '.source.targetRevision' "$vf")
  env=$(yq -r '.cluster.env // ""' "$vf")
  [ -z "$env" -o "$env" = null ] && env=$(env_of "$cluster")
  row="| ${cluster} | ${env} | ${default_rev} |"
  for comp in "${COMPONENTS[@]}"; do
    enabled=$(yq -r ".${comp}.enable // false" "$vf" 2>/dev/null || echo false)
    if [ "$enabled" = true ] || [ "$enabled" = "true" ]; then
      override=$(yq -r ".${comp}.source.targetRevision // \"\"" "$vf")
      [ -n "$override" ] && [ "$override" != null ] && eff="$override" || eff="$default_rev"
    else
      eff="❌"
    fi
    row+=" ${eff} |"
  done
  ROWS+=("$(rank_of "$env")|$row")
done

# Sort by rank then cluster
IFS=$'\n' SORTED=( $(printf '%s\n' "${ROWS[@]}" | sort -t '|' -k1,1n -k3,3) ); unset IFS

# Output
{
  echo "# What Runs Where"; echo; echo "> Generated by scripts/what-runs-where.sh. Do not edit manually."; echo;
  echo "Shows enabled components per cluster with effective Git targetRevision (override if set else default). Disabled: ❌" ; echo;
  echo "$HEADER"; echo "$SEPARATOR";
  for r in "${SORTED[@]}"; do echo "${r#*[0-9]|}" | sed 's/^| /| /'; done
  echo
} > "$OUT_FILE"

echo "[INFO] Wrote ${OUT_FILE}"